
tickTock:     file format elf32-i386


Disassembly of section .init:

080487bc <_init>:
 80487bc:	53                   	push   %ebx
 80487bd:	83 ec 08             	sub    $0x8,%esp
 80487c0:	e8 ab 01 00 00       	call   8048970 <__x86.get_pc_thunk.bx>
 80487c5:	81 c3 3b 28 00 00    	add    $0x283b,%ebx
 80487cb:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80487d1:	85 c0                	test   %eax,%eax
 80487d3:	74 05                	je     80487da <_init+0x1e>
 80487d5:	e8 36 00 00 00       	call   8048810 <__gmon_start__@plt>
 80487da:	83 c4 08             	add    $0x8,%esp
 80487dd:	5b                   	pop    %ebx
 80487de:	c3                   	ret

Disassembly of section .plt:

080487e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@plt-0x10>:
 80487e0:	ff 35 04 b0 04 08    	pushl  0x804b004
 80487e6:	ff 25 08 b0 04 08    	jmp    *0x804b008
 80487ec:	00 00                	add    %al,(%eax)
	...

080487f0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@plt>:
 80487f0:	ff 25 0c b0 04 08    	jmp    *0x804b00c
 80487f6:	68 00 00 00 00       	push   $0x0
 80487fb:	e9 e0 ff ff ff       	jmp    80487e0 <_init+0x24>

08048800 <__cxa_atexit@plt>:
 8048800:	ff 25 10 b0 04 08    	jmp    *0x804b010
 8048806:	68 08 00 00 00       	push   $0x8
 804880b:	e9 d0 ff ff ff       	jmp    80487e0 <_init+0x24>

08048810 <__gmon_start__@plt>:
 8048810:	ff 25 14 b0 04 08    	jmp    *0x804b014
 8048816:	68 10 00 00 00       	push   $0x10
 804881b:	e9 c0 ff ff ff       	jmp    80487e0 <_init+0x24>

08048820 <std::ios_base::Init::Init()@plt>:
 8048820:	ff 25 18 b0 04 08    	jmp    *0x804b018
 8048826:	68 18 00 00 00       	push   $0x18
 804882b:	e9 b0 ff ff ff       	jmp    80487e0 <_init+0x24>

08048830 <__libc_start_main@plt>:
 8048830:	ff 25 1c b0 04 08    	jmp    *0x804b01c
 8048836:	68 20 00 00 00       	push   $0x20
 804883b:	e9 a0 ff ff ff       	jmp    80487e0 <_init+0x24>

08048840 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
 8048840:	ff 25 20 b0 04 08    	jmp    *0x804b020
 8048846:	68 28 00 00 00       	push   $0x28
 804884b:	e9 90 ff ff ff       	jmp    80487e0 <_init+0x24>

08048850 <std::ios_base::Init::~Init()@plt>:
 8048850:	ff 25 24 b0 04 08    	jmp    *0x804b024
 8048856:	68 30 00 00 00       	push   $0x30
 804885b:	e9 80 ff ff ff       	jmp    80487e0 <_init+0x24>

08048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
 8048860:	ff 25 28 b0 04 08    	jmp    *0x804b028
 8048866:	68 38 00 00 00       	push   $0x38
 804886b:	e9 70 ff ff ff       	jmp    80487e0 <_init+0x24>

08048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
 8048870:	ff 25 2c b0 04 08    	jmp    *0x804b02c
 8048876:	68 40 00 00 00       	push   $0x40
 804887b:	e9 60 ff ff ff       	jmp    80487e0 <_init+0x24>

08048880 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
 8048880:	ff 25 30 b0 04 08    	jmp    *0x804b030
 8048886:	68 48 00 00 00       	push   $0x48
 804888b:	e9 50 ff ff ff       	jmp    80487e0 <_init+0x24>

08048890 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
 8048890:	ff 25 34 b0 04 08    	jmp    *0x804b034
 8048896:	68 50 00 00 00       	push   $0x50
 804889b:	e9 40 ff ff ff       	jmp    80487e0 <_init+0x24>

080488a0 <atoi@plt>:
 80488a0:	ff 25 38 b0 04 08    	jmp    *0x804b038
 80488a6:	68 58 00 00 00       	push   $0x58
 80488ab:	e9 30 ff ff ff       	jmp    80487e0 <_init+0x24>

080488b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
 80488b0:	ff 25 3c b0 04 08    	jmp    *0x804b03c
 80488b6:	68 60 00 00 00       	push   $0x60
 80488bb:	e9 20 ff ff ff       	jmp    80487e0 <_init+0x24>

080488c0 <std::allocator<char>::~allocator()@plt>:
 80488c0:	ff 25 40 b0 04 08    	jmp    *0x804b040
 80488c6:	68 68 00 00 00       	push   $0x68
 80488cb:	e9 10 ff ff ff       	jmp    80487e0 <_init+0x24>

080488d0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
 80488d0:	ff 25 44 b0 04 08    	jmp    *0x804b044
 80488d6:	68 70 00 00 00       	push   $0x70
 80488db:	e9 00 ff ff ff       	jmp    80487e0 <_init+0x24>

080488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>:
 80488e0:	ff 25 48 b0 04 08    	jmp    *0x804b048
 80488e6:	68 78 00 00 00       	push   $0x78
 80488eb:	e9 f0 fe ff ff       	jmp    80487e0 <_init+0x24>

080488f0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
 80488f0:	ff 25 4c b0 04 08    	jmp    *0x804b04c
 80488f6:	68 80 00 00 00       	push   $0x80
 80488fb:	e9 e0 fe ff ff       	jmp    80487e0 <_init+0x24>

08048900 <std::allocator<char>::allocator()@plt>:
 8048900:	ff 25 50 b0 04 08    	jmp    *0x804b050
 8048906:	68 88 00 00 00       	push   $0x88
 804890b:	e9 d0 fe ff ff       	jmp    80487e0 <_init+0x24>

08048910 <__gxx_personality_v0@plt>:
 8048910:	ff 25 54 b0 04 08    	jmp    *0x804b054
 8048916:	68 90 00 00 00       	push   $0x90
 804891b:	e9 c0 fe ff ff       	jmp    80487e0 <_init+0x24>

08048920 <_Unwind_Resume@plt>:
 8048920:	ff 25 58 b0 04 08    	jmp    *0x804b058
 8048926:	68 98 00 00 00       	push   $0x98
 804892b:	e9 b0 fe ff ff       	jmp    80487e0 <_init+0x24>

08048930 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
 8048930:	ff 25 5c b0 04 08    	jmp    *0x804b05c
 8048936:	68 a0 00 00 00       	push   $0xa0
 804893b:	e9 a0 fe ff ff       	jmp    80487e0 <_init+0x24>

Disassembly of section .text:

08048940 <_start>:
 8048940:	31 ed                	xor    %ebp,%ebp
 8048942:	5e                   	pop    %esi
 8048943:	89 e1                	mov    %esp,%ecx
 8048945:	83 e4 f0             	and    $0xfffffff0,%esp
 8048948:	50                   	push   %eax
 8048949:	54                   	push   %esp
 804894a:	52                   	push   %edx
 804894b:	68 20 90 04 08       	push   $0x8049020
 8048950:	68 b0 8f 04 08       	push   $0x8048fb0
 8048955:	51                   	push   %ecx
 8048956:	56                   	push   %esi
 8048957:	68 f7 8b 04 08       	push   $0x8048bf7
 804895c:	e8 cf fe ff ff       	call   8048830 <__libc_start_main@plt>
 8048961:	f4                   	hlt
 8048962:	66 90                	xchg   %ax,%ax
 8048964:	66 90                	xchg   %ax,%ax
 8048966:	66 90                	xchg   %ax,%ax
 8048968:	66 90                	xchg   %ax,%ax
 804896a:	66 90                	xchg   %ax,%ax
 804896c:	66 90                	xchg   %ax,%ax
 804896e:	66 90                	xchg   %ax,%ax

08048970 <__x86.get_pc_thunk.bx>:
 8048970:	8b 1c 24             	mov    (%esp),%ebx
 8048973:	c3                   	ret
 8048974:	66 90                	xchg   %ax,%ax
 8048976:	66 90                	xchg   %ax,%ax
 8048978:	66 90                	xchg   %ax,%ax
 804897a:	66 90                	xchg   %ax,%ax
 804897c:	66 90                	xchg   %ax,%ax
 804897e:	66 90                	xchg   %ax,%ax

08048980 <deregister_tm_clones>:
 8048980:	b8 6b b0 04 08       	mov    $0x804b06b,%eax
 8048985:	2d 68 b0 04 08       	sub    $0x804b068,%eax
 804898a:	83 f8 06             	cmp    $0x6,%eax
 804898d:	77 01                	ja     8048990 <deregister_tm_clones+0x10>
 804898f:	c3                   	ret
 8048990:	b8 00 00 00 00       	mov    $0x0,%eax
 8048995:	85 c0                	test   %eax,%eax
 8048997:	74 f6                	je     804898f <deregister_tm_clones+0xf>
 8048999:	55                   	push   %ebp
 804899a:	89 e5                	mov    %esp,%ebp
 804899c:	83 ec 18             	sub    $0x18,%esp
 804899f:	c7 04 24 68 b0 04 08 	movl   $0x804b068,(%esp)
 80489a6:	ff d0                	call   *%eax
 80489a8:	c9                   	leave
 80489a9:	c3                   	ret
 80489aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080489b0 <register_tm_clones>:
 80489b0:	b8 68 b0 04 08       	mov    $0x804b068,%eax
 80489b5:	2d 68 b0 04 08       	sub    $0x804b068,%eax
 80489ba:	c1 f8 02             	sar    $0x2,%eax
 80489bd:	89 c2                	mov    %eax,%edx
 80489bf:	c1 ea 1f             	shr    $0x1f,%edx
 80489c2:	01 d0                	add    %edx,%eax
 80489c4:	d1 f8                	sar    %eax
 80489c6:	75 01                	jne    80489c9 <register_tm_clones+0x19>
 80489c8:	c3                   	ret
 80489c9:	ba 00 00 00 00       	mov    $0x0,%edx
 80489ce:	85 d2                	test   %edx,%edx
 80489d0:	74 f6                	je     80489c8 <register_tm_clones+0x18>
 80489d2:	55                   	push   %ebp
 80489d3:	89 e5                	mov    %esp,%ebp
 80489d5:	83 ec 18             	sub    $0x18,%esp
 80489d8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80489dc:	c7 04 24 68 b0 04 08 	movl   $0x804b068,(%esp)
 80489e3:	ff d2                	call   *%edx
 80489e5:	c9                   	leave
 80489e6:	c3                   	ret
 80489e7:	89 f6                	mov    %esi,%esi
 80489e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080489f0 <__do_global_dtors_aux>:
 80489f0:	80 3d 0c b1 04 08 00 	cmpb   $0x0,0x804b10c
 80489f7:	75 13                	jne    8048a0c <__do_global_dtors_aux+0x1c>
 80489f9:	55                   	push   %ebp
 80489fa:	89 e5                	mov    %esp,%ebp
 80489fc:	83 ec 08             	sub    $0x8,%esp
 80489ff:	e8 7c ff ff ff       	call   8048980 <deregister_tm_clones>
 8048a04:	c6 05 0c b1 04 08 01 	movb   $0x1,0x804b10c
 8048a0b:	c9                   	leave
 8048a0c:	f3 c3                	repz ret
 8048a0e:	66 90                	xchg   %ax,%ax

08048a10 <frame_dummy>:
 8048a10:	a1 00 af 04 08       	mov    0x804af00,%eax
 8048a15:	85 c0                	test   %eax,%eax
 8048a17:	74 1f                	je     8048a38 <frame_dummy+0x28>
 8048a19:	b8 00 00 00 00       	mov    $0x0,%eax
 8048a1e:	85 c0                	test   %eax,%eax
 8048a20:	74 16                	je     8048a38 <frame_dummy+0x28>
 8048a22:	55                   	push   %ebp
 8048a23:	89 e5                	mov    %esp,%ebp
 8048a25:	83 ec 18             	sub    $0x18,%esp
 8048a28:	c7 04 24 00 af 04 08 	movl   $0x804af00,(%esp)
 8048a2f:	ff d0                	call   *%eax
 8048a31:	c9                   	leave
 8048a32:	e9 79 ff ff ff       	jmp    80489b0 <register_tm_clones>
 8048a37:	90                   	nop
 8048a38:	e9 73 ff ff ff       	jmp    80489b0 <register_tm_clones>

08048a3d <checkStage1(int, int)>:
 8048a3d:	55                   	push   %ebp
 8048a3e:	89 e5                	mov    %esp,%ebp
 8048a40:	83 ec 28             	sub    $0x28,%esp
 8048a43:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
 8048a47:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
 8048a4b:	7e 35                	jle    8048a82 <checkStage1(int, int)+0x45>
 8048a4d:	8b 45 08             	mov    0x8(%ebp),%eax
 8048a50:	99                   	cltd
 8048a51:	f7 7d 0c             	idivl  0xc(%ebp)
 8048a54:	89 d0                	mov    %edx,%eax
 8048a56:	85 c0                	test   %eax,%eax
 8048a58:	75 28                	jne    8048a82 <checkStage1(int, int)+0x45>
 8048a5a:	c7 44 24 04 40 90 04 	movl   $0x8049040,0x4(%esp)
 8048a61:	08
 8048a62:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048a69:	e8 f2 fd ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048a6e:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048a75:	08
 8048a76:	89 04 24             	mov    %eax,(%esp)
 8048a79:	e8 62 fe ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048a7e:	c6 45 f7 01          	movb   $0x1,-0x9(%ebp)
 8048a82:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
 8048a86:	c9                   	leave
 8048a87:	c3                   	ret

08048a88 <checkStage2(int, int)>:
 8048a88:	55                   	push   %ebp
 8048a89:	89 e5                	mov    %esp,%ebp
 8048a8b:	83 ec 28             	sub    $0x28,%esp
 8048a8e:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
 8048a92:	8b 45 08             	mov    0x8(%ebp),%eax
 8048a95:	83 c0 20             	add    $0x20,%eax
 8048a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048a9b:	8b 45 08             	mov    0x8(%ebp),%eax
 8048a9e:	29 45 f4             	sub    %eax,-0xc(%ebp)
 8048aa1:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048aa4:	29 45 f4             	sub    %eax,-0xc(%ebp)
 8048aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 8048aab:	75 28                	jne    8048ad5 <checkStage2(int, int)+0x4d>
 8048aad:	c7 44 24 04 51 90 04 	movl   $0x8049051,0x4(%esp)
 8048ab4:	08
 8048ab5:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048abc:	e8 9f fd ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048ac1:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048ac8:	08
 8048ac9:	89 04 24             	mov    %eax,(%esp)
 8048acc:	e8 0f fe ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048ad1:	c6 45 f3 01          	movb   $0x1,-0xd(%ebp)
 8048ad5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
 8048ad9:	c9                   	leave
 8048ada:	c3                   	ret

08048adb <checkStage3(std::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
 8048adb:	55                   	push   %ebp
 8048adc:	89 e5                	mov    %esp,%ebp
 8048ade:	53                   	push   %ebx
 8048adf:	83 ec 24             	sub    $0x24,%esp
 8048ae2:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
 8048ae6:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048ae9:	89 04 24             	mov    %eax,(%esp)
 8048aec:	e8 0f fe ff ff       	call   8048900 <std::allocator<char>::allocator()@plt>
 8048af1:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048af4:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048af8:	c7 44 24 04 64 90 04 	movl   $0x8049064,0x4(%esp)
 8048aff:	08
 8048b00:	8d 45 f0             	lea    -0x10(%ebp),%eax
 8048b03:	89 04 24             	mov    %eax,(%esp)
 8048b06:	e8 85 fd ff ff       	call   8048890 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
 8048b0b:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048b0e:	89 04 24             	mov    %eax,(%esp)
 8048b11:	e8 aa fd ff ff       	call   80488c0 <std::allocator<char>::~allocator()@plt>
 8048b16:	c7 44 24 04 83 90 04 	movl   $0x8049083,0x4(%esp)
 8048b1d:	08
 8048b1e:	8b 45 08             	mov    0x8(%ebp),%eax
 8048b21:	89 04 24             	mov    %eax,(%esp)
 8048b24:	e8 0d 04 00 00       	call   8048f36 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
 8048b29:	84 c0                	test   %al,%al
 8048b2b:	74 28                	je     8048b55 <checkStage3(std::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7a>
 8048b2d:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
 8048b31:	c7 44 24 04 94 90 04 	movl   $0x8049094,0x4(%esp)
 8048b38:	08
 8048b39:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048b40:	e8 1b fd ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048b45:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048b4c:	08
 8048b4d:	89 04 24             	mov    %eax,(%esp)
 8048b50:	e8 8b fd ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048b55:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048b58:	c7 44 24 08 a5 90 04 	movl   $0x80490a5,0x8(%esp)
 8048b5f:	08
 8048b60:	8d 55 f0             	lea    -0x10(%ebp),%edx
 8048b63:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048b67:	89 04 24             	mov    %eax,(%esp)
 8048b6a:	e8 e6 03 00 00       	call   8048f55 <std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
 8048b6f:	83 ec 04             	sub    $0x4,%esp
 8048b72:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048b75:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048b79:	8d 45 f0             	lea    -0x10(%ebp),%eax
 8048b7c:	89 04 24             	mov    %eax,(%esp)
 8048b7f:	e8 ac fd ff ff       	call   8048930 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
 8048b84:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048b87:	89 04 24             	mov    %eax,(%esp)
 8048b8a:	e8 e1 fc ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048b8f:	0f b6 5d ef          	movzbl -0x11(%ebp),%ebx
 8048b93:	8d 45 f0             	lea    -0x10(%ebp),%eax
 8048b96:	89 04 24             	mov    %eax,(%esp)
 8048b99:	e8 d2 fc ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048b9e:	89 d8                	mov    %ebx,%eax
 8048ba0:	eb 3d                	jmp    8048bdf <checkStage3(std::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x104>
 8048ba2:	89 c3                	mov    %eax,%ebx
 8048ba4:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048ba7:	89 04 24             	mov    %eax,(%esp)
 8048baa:	e8 11 fd ff ff       	call   80488c0 <std::allocator<char>::~allocator()@plt>
 8048baf:	89 d8                	mov    %ebx,%eax
 8048bb1:	89 04 24             	mov    %eax,(%esp)
 8048bb4:	e8 67 fd ff ff       	call   8048920 <_Unwind_Resume@plt>
 8048bb9:	89 c3                	mov    %eax,%ebx
 8048bbb:	8d 45 f4             	lea    -0xc(%ebp),%eax
 8048bbe:	89 04 24             	mov    %eax,(%esp)
 8048bc1:	e8 aa fc ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048bc6:	eb 02                	jmp    8048bca <checkStage3(std::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xef>
 8048bc8:	89 c3                	mov    %eax,%ebx
 8048bca:	8d 45 f0             	lea    -0x10(%ebp),%eax
 8048bcd:	89 04 24             	mov    %eax,(%esp)
 8048bd0:	e8 9b fc ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048bd5:	89 d8                	mov    %ebx,%eax
 8048bd7:	89 04 24             	mov    %eax,(%esp)
 8048bda:	e8 41 fd ff ff       	call   8048920 <_Unwind_Resume@plt>
 8048bdf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8048be2:	c9                   	leave
 8048be3:	c3                   	ret

08048be4 <parseInt(char*)>:
 8048be4:	55                   	push   %ebp
 8048be5:	89 e5                	mov    %esp,%ebp
 8048be7:	83 ec 18             	sub    $0x18,%esp
 8048bea:	8b 45 08             	mov    0x8(%ebp),%eax
 8048bed:	89 04 24             	mov    %eax,(%esp)
 8048bf0:	e8 ab fc ff ff       	call   80488a0 <atoi@plt>
 8048bf5:	c9                   	leave
 8048bf6:	c3                   	ret

08048bf7 <main>:
 8048bf7:	55                   	push   %ebp
 8048bf8:	89 e5                	mov    %esp,%ebp
 8048bfa:	53                   	push   %ebx
 8048bfb:	83 e4 f0             	and    $0xfffffff0,%esp
 8048bfe:	83 ec 30             	sub    $0x30,%esp
 8048c01:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
 8048c05:	7f 2e                	jg     8048c35 <main+0x3e>
 8048c07:	c7 44 24 04 a8 90 04 	movl   $0x80490a8,0x4(%esp)
 8048c0e:	08
 8048c0f:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048c16:	e8 45 fc ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048c1b:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048c22:	08
 8048c23:	89 04 24             	mov    %eax,(%esp)
 8048c26:	e8 b5 fc ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048c2b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
 8048c30:	e9 5d 02 00 00       	jmp    8048e92 <main+0x29b>
 8048c35:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
 8048c3c:	00
 8048c3d:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c40:	83 c0 04             	add    $0x4,%eax
 8048c43:	8b 00                	mov    (%eax),%eax
 8048c45:	89 04 24             	mov    %eax,(%esp)
 8048c48:	e8 97 ff ff ff       	call   8048be4 <parseInt(char*)>
 8048c4d:	89 44 24 24          	mov    %eax,0x24(%esp)
 8048c51:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c54:	83 c0 08             	add    $0x8,%eax
 8048c57:	8b 00                	mov    (%eax),%eax
 8048c59:	89 04 24             	mov    %eax,(%esp)
 8048c5c:	e8 83 ff ff ff       	call   8048be4 <parseInt(char*)>
 8048c61:	89 44 24 28          	mov    %eax,0x28(%esp)
 8048c65:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c68:	83 c0 0c             	add    $0xc,%eax
 8048c6b:	8b 00                	mov    (%eax),%eax
 8048c6d:	89 04 24             	mov    %eax,(%esp)
 8048c70:	e8 6f ff ff ff       	call   8048be4 <parseInt(char*)>
 8048c75:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 8048c79:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048c7d:	89 04 24             	mov    %eax,(%esp)
 8048c80:	e8 7b fc ff ff       	call   8048900 <std::allocator<char>::allocator()@plt>
 8048c85:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048c88:	83 c0 10             	add    $0x10,%eax
 8048c8b:	8b 00                	mov    (%eax),%eax
 8048c8d:	8d 54 24 1c          	lea    0x1c(%esp),%edx
 8048c91:	89 54 24 08          	mov    %edx,0x8(%esp)
 8048c95:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048c99:	8d 44 24 18          	lea    0x18(%esp),%eax
 8048c9d:	89 04 24             	mov    %eax,(%esp)
 8048ca0:	e8 eb fb ff ff       	call   8048890 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
 8048ca5:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048ca9:	89 04 24             	mov    %eax,(%esp)
 8048cac:	e8 0f fc ff ff       	call   80488c0 <std::allocator<char>::~allocator()@plt>
 8048cb1:	c7 44 24 04 de 90 04 	movl   $0x80490de,0x4(%esp)
 8048cb8:	08
 8048cb9:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048cc0:	e8 9b fb ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048cc5:	8b 54 24 24          	mov    0x24(%esp),%edx
 8048cc9:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048ccd:	89 04 24             	mov    %eax,(%esp)
 8048cd0:	e8 1b fb ff ff       	call   80487f0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@plt>
 8048cd5:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048cdc:	08
 8048cdd:	89 04 24             	mov    %eax,(%esp)
 8048ce0:	e8 fb fb ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048ce5:	c7 44 24 04 e7 90 04 	movl   $0x80490e7,0x4(%esp)
 8048cec:	08
 8048ced:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048cf4:	e8 67 fb ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048cf9:	8b 54 24 28          	mov    0x28(%esp),%edx
 8048cfd:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048d01:	89 04 24             	mov    %eax,(%esp)
 8048d04:	e8 e7 fa ff ff       	call   80487f0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@plt>
 8048d09:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048d10:	08
 8048d11:	89 04 24             	mov    %eax,(%esp)
 8048d14:	e8 c7 fb ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048d19:	c7 44 24 04 f7 90 04 	movl   $0x80490f7,0x4(%esp)
 8048d20:	08
 8048d21:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048d28:	e8 33 fb ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048d2d:	8b 54 24 2c          	mov    0x2c(%esp),%edx
 8048d31:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048d35:	89 04 24             	mov    %eax,(%esp)
 8048d38:	e8 b3 fa ff ff       	call   80487f0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@plt>
 8048d3d:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048d44:	08
 8048d45:	89 04 24             	mov    %eax,(%esp)
 8048d48:	e8 93 fb ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048d4d:	c7 44 24 04 07 91 04 	movl   $0x8049107,0x4(%esp)
 8048d54:	08
 8048d55:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048d5c:	e8 ff fa ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048d61:	8d 54 24 18          	lea    0x18(%esp),%edx
 8048d65:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048d69:	89 04 24             	mov    %eax,(%esp)
 8048d6c:	e8 3f fb ff ff       	call   80488b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
 8048d71:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048d78:	08
 8048d79:	89 04 24             	mov    %eax,(%esp)
 8048d7c:	e8 5f fb ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048d81:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048d88:	08
 8048d89:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048d90:	e8 4b fb ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048d95:	8b 44 24 28          	mov    0x28(%esp),%eax
 8048d99:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048d9d:	8b 44 24 24          	mov    0x24(%esp),%eax
 8048da1:	89 04 24             	mov    %eax,(%esp)
 8048da4:	e8 94 fc ff ff       	call   8048a3d <checkStage1(int, int)>							// Divides [num] by [1]
 8048da9:	88 44 24 17          	mov    %al,0x17(%esp)
 8048dad:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
 8048db2:	74 1d                	je     8048dd1 <main+0x1da>
 8048db4:	83 44 24 20 19       	addl   $0x19,0x20(%esp)
 8048db9:	8b 44 24 2c          	mov    0x2c(%esp),%eax
 8048dbd:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048dc1:	8b 44 24 24          	mov    0x24(%esp),%eax
 8048dc5:	89 04 24             	mov    %eax,(%esp)
 8048dc8:	e8 bb fc ff ff       	call   8048a88 <checkStage2(int, int)>
 8048dcd:	88 44 24 17          	mov    %al,0x17(%esp)
 8048dd1:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
 8048dd6:	74 35                	je     8048e0d <main+0x216>
 8048dd8:	83 44 24 20 32       	addl   $0x32,0x20(%esp)
 8048ddd:	8d 44 24 18          	lea    0x18(%esp),%eax
 8048de1:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048de5:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048de9:	89 04 24             	mov    %eax,(%esp)
 8048dec:	e8 4f fa ff ff       	call   8048840 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
 8048df1:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048df5:	89 04 24             	mov    %eax,(%esp)
 8048df8:	e8 de fc ff ff       	call   8048adb <checkStage3(std::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
 8048dfd:	88 44 24 17          	mov    %al,0x17(%esp)
 8048e01:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048e05:	89 04 24             	mov    %eax,(%esp)
 8048e08:	e8 63 fa ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048e0d:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
 8048e12:	74 29                	je     8048e3d <main+0x246>
 8048e14:	83 44 24 20 19       	addl   $0x19,0x20(%esp)
 8048e19:	c7 44 24 04 18 91 04 	movl   $0x8049118,0x4(%esp)
 8048e20:	08
 8048e21:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048e28:	e8 33 fa ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048e2d:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048e34:	08
 8048e35:	89 04 24             	mov    %eax,(%esp)
 8048e38:	e8 a3 fa ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048e3d:	c7 44 24 04 61 91 04 	movl   $0x8049161,0x4(%esp)
 8048e44:	08
 8048e45:	c7 04 24 80 b0 04 08 	movl   $0x804b080,(%esp)
 8048e4c:	e8 0f fa ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048e51:	8b 54 24 20          	mov    0x20(%esp),%edx
 8048e55:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048e59:	89 04 24             	mov    %eax,(%esp)
 8048e5c:	e8 8f f9 ff ff       	call   80487f0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@plt>
 8048e61:	c7 44 24 04 69 91 04 	movl   $0x8049169,0x4(%esp)
 8048e68:	08
 8048e69:	89 04 24             	mov    %eax,(%esp)
 8048e6c:	e8 ef f9 ff ff       	call   8048860 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048e71:	c7 44 24 04 f0 88 04 	movl   $0x80488f0,0x4(%esp)
 8048e78:	08
 8048e79:	89 04 24             	mov    %eax,(%esp)
 8048e7c:	e8 5f fa ff ff       	call   80488e0 <std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))@plt>
 8048e81:	bb 00 00 00 00       	mov    $0x0,%ebx
 8048e86:	8d 44 24 18          	lea    0x18(%esp),%eax
 8048e8a:	89 04 24             	mov    %eax,(%esp)
 8048e8d:	e8 de f9 ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048e92:	89 d8                	mov    %ebx,%eax
 8048e94:	eb 40                	jmp    8048ed6 <main+0x2df>
 8048e96:	89 c3                	mov    %eax,%ebx
 8048e98:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048e9c:	89 04 24             	mov    %eax,(%esp)
 8048e9f:	e8 1c fa ff ff       	call   80488c0 <std::allocator<char>::~allocator()@plt>
 8048ea4:	89 d8                	mov    %ebx,%eax
 8048ea6:	89 04 24             	mov    %eax,(%esp)
 8048ea9:	e8 72 fa ff ff       	call   8048920 <_Unwind_Resume@plt>
 8048eae:	89 c3                	mov    %eax,%ebx
 8048eb0:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048eb4:	89 04 24             	mov    %eax,(%esp)
 8048eb7:	e8 b4 f9 ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048ebc:	eb 02                	jmp    8048ec0 <main+0x2c9>
 8048ebe:	89 c3                	mov    %eax,%ebx
 8048ec0:	8d 44 24 18          	lea    0x18(%esp),%eax
 8048ec4:	89 04 24             	mov    %eax,(%esp)
 8048ec7:	e8 a4 f9 ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048ecc:	89 d8                	mov    %ebx,%eax
 8048ece:	89 04 24             	mov    %eax,(%esp)
 8048ed1:	e8 4a fa ff ff       	call   8048920 <_Unwind_Resume@plt>
 8048ed6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8048ed9:	c9                   	leave
 8048eda:	c3                   	ret

08048edb <__static_initialization_and_destruction_0(int, int)>:
 8048edb:	55                   	push   %ebp
 8048edc:	89 e5                	mov    %esp,%ebp
 8048ede:	83 ec 18             	sub    $0x18,%esp
 8048ee1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 8048ee5:	75 31                	jne    8048f18 <__static_initialization_and_destruction_0(int, int)+0x3d>
 8048ee7:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 8048eee:	75 28                	jne    8048f18 <__static_initialization_and_destruction_0(int, int)+0x3d>
 8048ef0:	c7 04 24 0d b1 04 08 	movl   $0x804b10d,(%esp)
 8048ef7:	e8 24 f9 ff ff       	call   8048820 <std::ios_base::Init::Init()@plt>
 8048efc:	c7 44 24 08 64 b0 04 	movl   $0x804b064,0x8(%esp)
 8048f03:	08
 8048f04:	c7 44 24 04 0d b1 04 	movl   $0x804b10d,0x4(%esp)
 8048f0b:	08
 8048f0c:	c7 04 24 50 88 04 08 	movl   $0x8048850,(%esp)
 8048f13:	e8 e8 f8 ff ff       	call   8048800 <__cxa_atexit@plt>
 8048f18:	c9                   	leave
 8048f19:	c3                   	ret

08048f1a <_GLOBAL__sub_I__Z11checkStage1ii>:
 8048f1a:	55                   	push   %ebp
 8048f1b:	89 e5                	mov    %esp,%ebp
 8048f1d:	83 ec 18             	sub    $0x18,%esp
 8048f20:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
 8048f27:	00
 8048f28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048f2f:	e8 a7 ff ff ff       	call   8048edb <__static_initialization_and_destruction_0(int, int)>
 8048f34:	c9                   	leave
 8048f35:	c3                   	ret

08048f36 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
 8048f36:	55                   	push   %ebp
 8048f37:	89 e5                	mov    %esp,%ebp
 8048f39:	83 ec 18             	sub    $0x18,%esp
 8048f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048f3f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f43:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f46:	89 04 24             	mov    %eax,(%esp)
 8048f49:	e8 32 f9 ff ff       	call   8048880 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
 8048f4e:	85 c0                	test   %eax,%eax
 8048f50:	0f 94 c0             	sete   %al
 8048f53:	c9                   	leave
 8048f54:	c3                   	ret

08048f55 <std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
 8048f55:	55                   	push   %ebp
 8048f56:	89 e5                	mov    %esp,%ebp
 8048f58:	53                   	push   %ebx
 8048f59:	83 ec 14             	sub    $0x14,%esp
 8048f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048f5f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f63:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f66:	89 04 24             	mov    %eax,(%esp)
 8048f69:	e8 d2 f8 ff ff       	call   8048840 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
 8048f6e:	8b 45 10             	mov    0x10(%ebp),%eax
 8048f71:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048f75:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f78:	89 04 24             	mov    %eax,(%esp)
 8048f7b:	e8 50 f9 ff ff       	call   80488d0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
 8048f80:	eb 17                	jmp    8048f99 <std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)+0x44>
 8048f82:	89 c3                	mov    %eax,%ebx
 8048f84:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f87:	89 04 24             	mov    %eax,(%esp)
 8048f8a:	e8 e1 f8 ff ff       	call   8048870 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
 8048f8f:	89 d8                	mov    %ebx,%eax
 8048f91:	89 04 24             	mov    %eax,(%esp)
 8048f94:	e8 87 f9 ff ff       	call   8048920 <_Unwind_Resume@plt>
 8048f99:	8b 45 08             	mov    0x8(%ebp),%eax
 8048f9c:	83 c4 14             	add    $0x14,%esp
 8048f9f:	5b                   	pop    %ebx
 8048fa0:	5d                   	pop    %ebp
 8048fa1:	c2 04 00             	ret    $0x4
 8048fa4:	66 90                	xchg   %ax,%ax
 8048fa6:	66 90                	xchg   %ax,%ax
 8048fa8:	66 90                	xchg   %ax,%ax
 8048faa:	66 90                	xchg   %ax,%ax
 8048fac:	66 90                	xchg   %ax,%ax
 8048fae:	66 90                	xchg   %ax,%ax

08048fb0 <__libc_csu_init>:
 8048fb0:	55                   	push   %ebp
 8048fb1:	57                   	push   %edi
 8048fb2:	31 ff                	xor    %edi,%edi
 8048fb4:	56                   	push   %esi
 8048fb5:	53                   	push   %ebx
 8048fb6:	e8 b5 f9 ff ff       	call   8048970 <__x86.get_pc_thunk.bx>
 8048fbb:	81 c3 45 20 00 00    	add    $0x2045,%ebx
 8048fc1:	83 ec 1c             	sub    $0x1c,%esp
 8048fc4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048fc8:	8d b3 fc fe ff ff    	lea    -0x104(%ebx),%esi
 8048fce:	e8 e9 f7 ff ff       	call   80487bc <_init>
 8048fd3:	8d 83 f4 fe ff ff    	lea    -0x10c(%ebx),%eax
 8048fd9:	29 c6                	sub    %eax,%esi
 8048fdb:	c1 fe 02             	sar    $0x2,%esi
 8048fde:	85 f6                	test   %esi,%esi
 8048fe0:	74 27                	je     8049009 <__libc_csu_init+0x59>
 8048fe2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048fe8:	8b 44 24 38          	mov    0x38(%esp),%eax
 8048fec:	89 2c 24             	mov    %ebp,(%esp)
 8048fef:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048ff3:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048ff7:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048ffb:	ff 94 bb f4 fe ff ff 	call   *-0x10c(%ebx,%edi,4)
 8049002:	83 c7 01             	add    $0x1,%edi
 8049005:	39 f7                	cmp    %esi,%edi
 8049007:	75 df                	jne    8048fe8 <__libc_csu_init+0x38>
 8049009:	83 c4 1c             	add    $0x1c,%esp
 804900c:	5b                   	pop    %ebx
 804900d:	5e                   	pop    %esi
 804900e:	5f                   	pop    %edi
 804900f:	5d                   	pop    %ebp
 8049010:	c3                   	ret
 8049011:	eb 0d                	jmp    8049020 <__libc_csu_fini>
 8049013:	90                   	nop
 8049014:	90                   	nop
 8049015:	90                   	nop
 8049016:	90                   	nop
 8049017:	90                   	nop
 8049018:	90                   	nop
 8049019:	90                   	nop
 804901a:	90                   	nop
 804901b:	90                   	nop
 804901c:	90                   	nop
 804901d:	90                   	nop
 804901e:	90                   	nop
 804901f:	90                   	nop

08049020 <__libc_csu_fini>:
 8049020:	f3 c3                	repz ret

Disassembly of section .fini:

08049024 <_fini>:
 8049024:	53                   	push   %ebx
 8049025:	83 ec 08             	sub    $0x8,%esp
 8049028:	e8 43 f9 ff ff       	call   8048970 <__x86.get_pc_thunk.bx>
 804902d:	81 c3 d3 1f 00 00    	add    $0x1fd3,%ebx
 8049033:	83 c4 08             	add    $0x8,%esp
 8049036:	5b                   	pop    %ebx
 8049037:	c3                   	ret
